Organization:
agent munkához rendelése -> put kérés hogy az agentid-t állítsá át a kijelőlt agentnek

agentnek ki kell küldeni a jelszot az agent létrehozásakor (uzenet)

munka akkor aktiv ha van agnetid


Agent:

Diákok jelentkezése elfogadása -> done

A saját munkái megjelenitése  -> (cards)
*műszak létrehozása
	-ha nincs muszak akkor nem tud(naptár üres)

	
*műszak beosztása
	-muszak jelentkezés csak törlés nincs modositas
	-muszak előtt 12 órával lehet lemondani a muszakot ha elfogadták
	-emailküldés hogy változtatták a műszakot, törlés
	-2 muszak kozott 11 ora és ugyan az a napon nem kezdődhet muszak
	-jelzi a közvetítőnek hogy azta diákot az elv szerint nem lehet beosztani

Diákok kilistázása aki az adott agenthez tartozik(munkára)
{actions}
-email küldés (szűrésekkel)

diákok műszakra jelentkezését elfogadása -> ???

beállitasok -> adatok modositasa

vezérlőpult -> jelenlegi munkáim,
-hány diák(munka szerint, muszak szerint)

user:
vezérlőpult -> jelenlegi munkáim száma

munkára való jelentkezés -> ???(munkákoldaon a jelentkezzem gombbal)

Műszakra való jelentkezés kérése -> (pőtyyök 3 szin 3 muszak naptár)

Saját munkáim megjelenítése -> get kérés

beállitasok -> adatok modositasa


var userIdClaim = User.FindFirst(ClaimTypes.NameIdentifier);
var roleClaim = User.FindFirst(ClaimTypes.Role);

if (userIdClaim == null || roleClaim == null)
{
    return Unauthorized(new { message = "User is not authenticated." });
}

var loggedInUserId = userIdClaim.Value;
var userRole = roleClaim.Value;

var organizationParams = new[] { new MySqlParameter("@UserId", loggedInUserId) };
var organizationTable = await _dbHelper.ExecuteQueryAsync(getOrganizationQuery, organizationParams);



if (userRole != "Organization")
{
    return Unauthorized(new { message = "You do not have the required permissions." });
}


{
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
        }







